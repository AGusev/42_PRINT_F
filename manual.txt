# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    manual.txt                                         :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: agusev <agusev@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/03/12 20:00:06 by agusev            #+#    #+#              #
#    Updated: 2019/03/12 20:42:24 by agusev           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

I Initializing Myprintf’s arguments
1) va_list arg;
This line declares a variable, arg, which we use to manipulating the argument list containing variable arguments of Myprintf( ). The data type of the variable is va_list, a special type defined by <stdarg.h>.

2)
va_start(arg, format);
This line initializes arg variable with function’s last fixed argument i.e. format. va_start() uses this to figure out where the variable arguments begin.

II Fetching and executing arguments
3)
i = va_arg(arg,int);
va_arg() fetches the next argument from the argument list. The second parameter to va_arg() is the data type of the argument we expect.
Note: va_arg( ) function will never receive arguments of type char, short int, or float. va_arg( ) function only accept arguments of type char *, unsigned int, int or double.

III Closing argument list to necessary clean-up
4)
va_end(arg);
Finally, when we’re finished processing the all arguments, we call va_end(), which performs any necessary cleanup.
